/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p2pnetwork;

import Util.Constants;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author Moreno
 */
public class Application extends javax.swing.JFrame {

    private DefaultListModel peerListModel;
    private DefaultListModel messageQueueModel;
    private int lastSelectedIndex;
    private final List<Peer> peerList;
    
    private Peer selectedPeer;
    
    private VisualizerRunnable visualizer;

    /**
     * Creates new form Application
     */
    public Application() {

        peerList = new ArrayList<>();
        
                
        visualizer = new VisualizerRunnable();
        
        Thread visualizerThread = new Thread(visualizer, "Visualizer");
        
        visualizerThread.start();

        initComponents();

        StartBootPeer();

    }

    private void StartBootPeer() {

        byte id = Constants.BOOTPEER_ID;
        Peer peer = new Peer(id, Constants.SERVERPORT);

        peer.setBootPeer(true);
        peer.Start();

        Thread peerThread = new Thread(peer);
        peerThread.start();

        peerList.add(peer);

        messageQueueModel = new DefaultListModel();
        peerListModel = new DefaultListModel();
        
        list_MessageQueue.setModel(messageQueueModel);
        list_peerList.setModel(peerListModel);

        UpdatePeerListData();
        
        visualizer.Init(messageQueueModel,lable_LastRecievedMessage);
    }

    private void UpdatePeerListData() {
        peerListModel.clear();

        for (int i = 0; i < peerList.size(); i++) {
            Peer peer = peerList.get(i);
            
            String suffix = peer.isBootpeer() ? "(BOOT) " : "";
            
            String displayName = suffix + "Peer " + peer.getId() + " status= " + peer.GetPeerStatus() + " references= " + peer.getPeerReferences();

            peerListModel.add(i, displayName);
        }
        
        visualizer.UpdatePeerList(peerList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_peerList = new javax.swing.JList<>();
        buton_AddPeer = new javax.swing.JButton();
        field_Port = new javax.swing.JTextField();
        label_Port = new javax.swing.JLabel();
        label_Address_Value = new javax.swing.JLabel();
        label_ID_value = new javax.swing.JLabel();
        button_Refresh = new javax.swing.JToggleButton();
        label_id = new javax.swing.JLabel();
        label_address = new javax.swing.JLabel();
        button_JoinPeerId = new javax.swing.JButton();
        textfield_PeerId = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_MessageQueue = new javax.swing.JList<>();
        lable_LastRecievedMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        list_peerList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_peerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_peerListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list_peerList);

        buton_AddPeer.setText("Add Peer");
        buton_AddPeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_AddPeerActionPerformed(evt);
            }
        });

        field_Port.setText("1201");

        label_Port.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_Port.setText("Port");

        label_Address_Value.setText(" ");

        label_ID_value.setText(" ");

        button_Refresh.setText("Refresh List");
        button_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_RefreshActionPerformed(evt);
            }
        });

        label_id.setText("Peer ID");

        label_address.setText("Address");

        button_JoinPeerId.setText("Join Peer ID");
        button_JoinPeerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_JoinPeerIdActionPerformed(evt);
            }
        });

        textfield_PeerId.setText("0");

        list_MessageQueue.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list_MessageQueue);

        lable_LastRecievedMessage.setText("LastRecievedMessage");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(button_JoinPeerId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfield_PeerId))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buton_AddPeer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label_Port, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(field_Port))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_Refresh, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_id, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_address, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_ID_value, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                            .addComponent(label_Address_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lable_LastRecievedMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buton_AddPeer)
                            .addComponent(button_Refresh)
                            .addComponent(lable_LastRecievedMessage))
                        .addGap(1, 1, 1)
                        .addComponent(label_Port)
                        .addGap(3, 3, 3)
                        .addComponent(field_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_JoinPeerId)
                            .addComponent(textfield_PeerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_address)
                            .addComponent(label_Address_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_id)
                            .addComponent(label_ID_value))))
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buton_AddPeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_AddPeerActionPerformed
        // TODO add your handling code here:

        byte id = Constants.DISCONNECTED_PEERID;

        Peer newPeer = new Peer(id, Integer.parseInt(field_Port.getText()));

        newPeer.Start();

        Thread peerThread = new Thread(newPeer);
        peerThread.start();

        peerList.add(newPeer);

        int portNumber = Integer.parseInt(field_Port.getText());
        portNumber++;
        field_Port.setText(Integer.toString(portNumber));

        UpdatePeerListData();
    }//GEN-LAST:event_buton_AddPeerActionPerformed

    private void list_peerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_peerListValueChanged
        // TODO add your handling code here:

        if (evt.getValueIsAdjusting()) {
            return;
        }

        int index = evt.getLastIndex() == lastSelectedIndex ? evt.getFirstIndex() : evt.getLastIndex();

        lastSelectedIndex = Math.min(index, peerList.size() - 1);
        selectedPeer = peerList.get(lastSelectedIndex);

        label_Address_Value.setText(selectedPeer.getAddress());
        label_ID_value.setText(Integer.toString(selectedPeer.getId()));

        System.out.println("Selected" + selectedPeer.toString());
        
        visualizer.UpdatePeerList(peerList);
        visualizer.SelectNewPeer(selectedPeer.getId());
        
    }//GEN-LAST:event_list_peerListValueChanged

    private void button_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_RefreshActionPerformed

        UpdatePeerListData();
    }//GEN-LAST:event_button_RefreshActionPerformed

    private void button_JoinPeerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_JoinPeerIdActionPerformed
        selectedPeer.SendMessage(Integer.parseInt(textfield_PeerId.getText()), "TEST MESSAGE!");
    }//GEN-LAST:event_button_JoinPeerIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buton_AddPeer;
    private javax.swing.JButton button_JoinPeerId;
    private javax.swing.JToggleButton button_Refresh;
    private javax.swing.JTextField field_Port;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_Address_Value;
    private javax.swing.JLabel label_ID_value;
    private javax.swing.JLabel label_Port;
    private javax.swing.JLabel label_address;
    private javax.swing.JLabel label_id;
    private javax.swing.JLabel lable_LastRecievedMessage;
    private javax.swing.JList<String> list_MessageQueue;
    private javax.swing.JList<String> list_peerList;
    private javax.swing.JTextField textfield_PeerId;
    // End of variables declaration//GEN-END:variables
}
